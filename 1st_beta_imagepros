import sys
import numpy as np
import SimpleITK as sitk
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QSlider, QVBoxLayout, QHBoxLayout, QWidget, QFileDialog, QPushButton, QGridLayout, QToolBar
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap, QImage
import pyvista as pv
from pyvistaqt import BackgroundPlotter

class ImageViewer(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.active_slider = None  # Track which slider is currently active

    def initUI(self):
        self.setWindowTitle("ITK-SNAP Clone - 3 Axis View with 3D (PyVista)")
        self.setGeometry(100, 100, 1200, 800)

        # Create toolbar for actions
        self.toolbar = QToolBar("Toolbar", self)
        self.addToolBar(self.toolbar)

        # Load Image Button
        self.load_button = QPushButton("Load Image", self)
        self.load_button.clicked.connect(self.load_image)
        self.toolbar.addWidget(self.load_button)

        # Create QLabel widgets for each view (XY, XZ, ZY)
        self.xy_label = QLabel(self)
        self.xy_label.setAlignment(Qt.AlignCenter)

        self.xz_label = QLabel(self)
        self.xz_label.setAlignment(Qt.AlignCenter)

        self.zy_label = QLabel(self)
        self.zy_label.setAlignment(Qt.AlignCenter)

        # Create sliders for each axis
        self.xy_slider = QSlider(Qt.Horizontal, self)
        self.xz_slider = QSlider(Qt.Horizontal, self)
        self.zy_slider = QSlider(Qt.Horizontal, self)

        # Connect sliders to synchronize them
        self.xy_slider.valueChanged.connect(self.xy_slider_changed)
        self.xz_slider.valueChanged.connect(self.xz_slider_changed)
        self.zy_slider.valueChanged.connect(self.zy_slider_changed)

        # Create layouts
        layout = QVBoxLayout()

        # Create grid layout for the 2D views and sliders
        grid_layout = QGridLayout()
        grid_layout.addWidget(QLabel("XY View"), 0, 0)
        grid_layout.addWidget(self.xy_label, 1, 0)
        grid_layout.addWidget(self.xy_slider, 2, 0)

        grid_layout.addWidget(QLabel("XZ View"), 0, 1)
        grid_layout.addWidget(self.xz_label, 1, 1)
        grid_layout.addWidget(self.xz_slider, 2, 1)

        grid_layout.addWidget(QLabel("ZY View"), 0, 2)
        grid_layout.addWidget(self.zy_label, 1, 2)
        grid_layout.addWidget(self.zy_slider, 2, 2)

        # Add grid layout to the main layout
        layout.addLayout(grid_layout)

        # Initialize PyVista BackgroundPlotter for the 3D view
        self.plotter = BackgroundPlotter(off_screen=False)

        # Create a layout for the 3D view
        #self.plotter_widget = self.plotter.interactive_widget
        #layout.addWidget(self.plotter_widget)  # Add the render window to the layout

        # Set the main layout
        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

        self.image_array = None

    def load_image(self):
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(self, "Open Image File", "", "NIFTI Files (*.nii *.nii.gz)")
        if file_path:
            # Load image using SimpleITK
            self.image = sitk.ReadImage(file_path)
            self.image_array = sitk.GetArrayFromImage(self.image)

            # Set maximum values for the sliders based on image dimensions
            max_value = min(self.image_array.shape) - 1
            self.xy_slider.setMaximum(max_value)
            self.xz_slider.setMaximum(max_value)
            self.zy_slider.setMaximum(max_value)

            # Update the views with the initial slice index
            self.update_all_images(0)
            self.update_3d_view()

    def xy_slider_changed(self, value):
        """Handle changes in the XY slider."""
        self.active_slider = 'xy'
        self.update_all_images(value)
        self.xz_slider.setValue(value)  # Update the XZ view based on the XY slider
        self.zy_slider.setValue(value)   # Update the ZY view based on the XY slider

    def xz_slider_changed(self, value):
        """Handle changes in the XZ slider."""
        self.active_slider = 'xz'
        self.update_all_images(value)
        self.xy_slider.setValue(value)  # Update the XY view based on the XZ slider
        self.zy_slider.setValue(value)   # Update the ZY view based on the XZ slider

    def zy_slider_changed(self, value):
        """Handle changes in the ZY slider."""
        self.active_slider = 'zy'
        self.update_all_images(value)
        self.xy_slider.setValue(value)  # Update the XY view based on the ZY slider
        self.xz_slider.setValue(value)   # Update the XZ view based on the ZY slider

    def update_all_images(self, slice_idx):
        """Update all three 2D views (XY, XZ, ZY)."""
        self.update_xy_image(slice_idx)
        self.update_xz_image(slice_idx)
        self.update_zy_image(slice_idx)

    def update_xy_image(self, slice_idx):
        if self.image_array is not None:
            slice_image = self.image_array[slice_idx, :, :]  # XY view (axial)
            self.display_image(slice_image, self.xy_label)

    def update_xz_image(self, slice_idx):
        if self.image_array is not None:
            slice_image = self.image_array[:, slice_idx, :]  # XZ view (sagittal)
            self.display_image(slice_image, self.xz_label)

    def update_zy_image(self, slice_idx):
        if self.image_array is not None:
            slice_image = self.image_array[:, :, slice_idx]  # ZY view (coronal)
            self.display_image(slice_image, self.zy_label)

    def update_3d_view(self):
        """Create an interactive 3D view using PyVista."""
        if self.image_array is not None:
            # Normalize image array to [0, 255] range
            norm_image = (self.image_array - np.min(self.image_array)) / (np.max(self.image_array) - np.min(self.image_array)) * 255
            norm_image = norm_image.astype(np.uint8)

            # Create a PyVista ImageData object from the 3D image array
            grid = pv.ImageData(dimensions=self.image_array.shape)

            # Add the image data to the grid as point data
            grid.point_data["values"] = norm_image.flatten(order="F")  # Flatten in Fortran (column-major) order

            # Clear previous plot if any
            self.plotter.clear()

            # Add the grid to the plotter and apply a volume rendering
            self.plotter.add_volume(grid, opacity="linear", cmap="gray", show_scalar_bar=False)

            # Update the plotter
            self.plotter.reset_camera()

    def display_image(self, slice_image, label):
        """Convert a NumPy array to QImage and display it in the QLabel."""
        height, width = slice_image.shape

        # Avoid division by zero by checking if the min and max are equal
        min_val = np.min(slice_image)
        max_val = np.max(slice_image)

        if max_val != min_val:
            slice_image = (slice_image - min_val) / (max_val - min_val) * 255
        else:
            slice_image = np.zeros_like(slice_image)  # If min == max, set to zero

        slice_image = slice_image.astype(np.uint8)

        q_image = QImage(slice_image.data, width, height, QImage.Format_Grayscale8)
        pixmap = QPixmap.fromImage(q_image)
        label.setPixmap(pixmap.scaled(label.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))


def main():
    app = QApplication(sys.argv)
    window = ImageViewer()
    window.show()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
